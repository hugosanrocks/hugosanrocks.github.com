% gda11_??
% radon example 2; image from a tif file

figure(1);
clf;

% image mtrue(i,j) is N by N, in (x=i,y=j) space, range of botx x, y is +/- 1
N = 256;

Nx = N;
xmin = -1;
xmax = 1;
Dx = (xmax-xmin)/Nx;
x = xmin + Dx*[1:Nx]';

Ny = N;
ymin = -1;
ymax = 1;
Dy = (ymax-ymin)/Ny;
y = ymin + Dy*[1:Ny]';

% test image is a tiff file with a hypothetical depiction of a magma
% chamber; Image must be 256 by 256 in dimension to work.
mtrue=double(flipud(imread('../data/magma.tif','tif')));
mtrue = -(mtrue-mean(mean(mtrue)));

fprintf('m has minimum value %f \n', min(min(mtrue)) );
fprintf('m has maximum value %f \n', max(max(mtrue)) );
fprintf('\n');

subplot(1,3,1);
set(gca,'LineWidth',2);
hold on;
axis( [-1, 1, -1, 1] );
axis ij;
imagesc([-1, 1], [-1, 1], mtrue);
title('true image');
xlabel('y');
ylabel('x');

% radon transform R(i,j) is in (u=i, q=theta=j) space
% range of u is +/- 1 (note corners of box cur off)
% range of q is 0 to pi

Nu = N;
umin = -1;
umax = 1;
Du = (umax-umin)/Nu;
u = umin + Du*[1:Nu]';

Nq = N+1;
qmin = -pi/2;
qmax = pi/2;
Dq = (qmax-qmin)/(Nq-1); % note includes both -pi/2 and pi/2
q = qmin + Dq*[0:Nq-1]'; % for ease of interpolation

% integration over s, range +/- 1
Ns = 4*N;
smin = -1;
smax = 1;
Ds =(smax-smin)/Ns;
s = smin + Ds*[1:Ns]';

% radon transform via ray sums
R = zeros(Nu,Nq);

% loop over theta
for i = [1:Nq]
    
    % object here is top build Nu by Ns array of image, m,
    % evaluated at proper values of (u, s)

    % (x,y) from (u,s); these are Nu by Ns matrices
    xp = u*sin(q(i))*ones(1, Ns) - ones(Nu,1)*s'*cos(q(i))';
    yp = u*cos(q(i))*ones(1, Ns) + ones(Nu,1)*s'*sin(q(i));
 

    % indices corresponding to (x, y)
    ixp = floor((xp-xmin)/Dx) + 1;
    iyp = floor((yp-ymin)/Dy) + 1;

    % handle out of range x indices
    jxp1 = find(ixp<1);
    ixp(jxp1)=1;
    jxp2 = find(ixp>Nx);
    ixp(jxp2)=Nx;

    % handle out of range y indices
    jyp1 = find(iyp<1);
    iyp(jyp1)=1;
    jyp2 = find(iyp>Ny);
    iyp(jyp2)=Ny;
    
    % nasty array manipulation to sample image, mtrue,
    % at a series of (u, s) points, putting the values
    % in an Nu by Ns matrix, S
    
    % Step 1: convert Nu by Ns arrays to vectors
    Lixp = ixp( [1:Nu*Ns]' );
    Liyp = iyp( [1:Nu*Ns]' );
    % Step 2: generate linear index into image
    L = sub2ind( [Nx, Ny], Lixp, Liyp);
    % Step 3: sample image, mtrue, and rearrange it back into Nu by Ns
    % array
    S = reshape(mtrue(L),Nu,Ns);

    % now handle points that were off the edge of (x,y) space by
    % setting values to zero
    S( jxp1 ) = 0;
    S( jxp2 ) = 0;
    S( jyp1 ) = 0;
    S( jyp2 ) = 0;
    
    % interate (sum) S(u,s) over s to get R(u)
    R(:,i) = Ds*sum(S,2);
end

subplot(1,3,2);
set(gca,'LineWidth',2);
hold on;
axis( [-1, 1, -1, 1] );
axis ij;
imagesc([-1, 1], [-1, 1], R);
title('Radon transform');
xlabel('theta');
ylabel('u');

fprintf('R has minimum value %f \n', min(min(R)) );
fprintf('R has maximum value %f \n', max(max(R)) );
fprintf('\n');

% reorder array so that s=0, currenty at row N/2, is at row 1.
R = circshift(R, [-Nx/2+1,0] );
% now take 1D fourier transform over columns of R
Rt = fft(R);

% invert radon transform via central slice theorem

% fourier transform of image
mtt=zeros(Nx,Ny);

% fourier transform u -> ku
kumin=0;
kumax = 1/(2*Du);
Dku=kumax/(Nu/2);
ku=Dku*[0:Nu/2,-Nu/2+1:-1]';
Nku2 = Nu/2+1; % non-negative frequuencies

% fourier transform x -> kx
kxmin=0;
kxmax = 1/(2*Dx);
Dkx=kxmax/(Nx/2);
kx=Dkx*[0:Nx/2,-Nx/2+1:-1]';
Nkx2 = Nx/2+1; % non-negative frequuencies

% fourier transform y -> ky
kymin=0;
kymax = 1/(2*Dx);
Dky=kymax/(Ny/2);
ky=Dky*[0:Ny/2,-Ny/2+1:-1]';
Nky2 = Ny/2+1; % non-negative frequuencies

% build fft of image by interpolating the fft of the radon transform
% using the central slice theorem
% (one might imagine doing this without the loops
% and using a MatLab interpolation function to boot,
% but I donlt have the stamina tonight to try it ... )
for i = [1:Nx]
for j = [1:Nky2] % only need left side, will rebuild right using symmetry
    
        % theta calculation
        theta = atan2( kx(i), ky(j) );
        if( theta > (pi/2) ) % map large thetas onto negative thetas
            theta=pi-theta;
            thflag=1;
        else
            thflag=0;
        end
        
        % radial wavenumber
        kr = sqrt(kx(i)^2 + ky(j)^2);
        % index into randon transform array
        if( kr > kumax )
            continue; % ignore points that are out of bounds
        end
            
        % treat indices are real numbers
        krindex = (kr-kumin)/Dku+1;
        thindex = (theta-qmin)/Dq+1;
        if( thindex<1 )
            thindex=1;
        elseif( thindex>Nq )
            thindex=Nq;
        end
                
        % bracket real number indices with integers
        
        % radial index
        A = floor(krindex);
        B = floor(krindex+1);
        if( B >= Nku2 )
            A = Nku2-1;
            B= Nku2;
        end
        
        % theta index
        C = floor(thindex);
        D = floor(thindex+1);
        if( D >= Nq )
            C=Nq-1;
            D=Nq;
        end
        
        % Lagrangian polynomial interpoaltion
        % note that the indices are separated by unity
        FC  = (D-thindex);
        CKR = ((B-krindex)*Rt(A,C)+(krindex-A)*Rt(B,C));
        FD = (thindex-C);
        DKR = ((B-krindex)*Rt(A,D)+(krindex-A)*Rt(B,D));
        tmp = (FC*CKR+FD*DKR);
        if (thflag==1)
             mtt(i,j)=conj(tmp);
        else
             mtt(i,j)=tmp;
        end
        
end
end

% Fourier transform of image needs to be phase shifted
% else origin is in the wrong place
xshift = (xmax-xmin)/2;
yshift = (ymax-ymin)/2;
phase = 2*pi*(kx*ones(1,Ny)*xshift + ones(Nx,1)*(ky')*yshift);
mtt = mtt .* complex( cos(phase), sin(phase) );

% impose all necessary symmetries required for a real image
% these four elements must be real
mtt(1,1)=real(mtt(1,1));
mtt(Nx/2+1,1)=real(mtt(Nx/2+1,1));
mtt(1,Ny/2+1)=real(mtt(1,Ny/2+1,1));
mtt(Nx/2+1,Ny/2+1)=real(mtt(Nx/2+1,Ny/2+1));
% bottoms of these two columns must be conjugates of top
mtt(Nx:-1:Nx/2+2,1)=conj(mtt(2:Nx/2,1));
mtt(Nx:-1:Nx/2+2,Ny/2+1)=conj(mtt(2:Nx/2,Ny/2+1));
% right hand side flipped conjugate of left hand side
for m = [2:Ny/2]
    mp=Ny-m+2;
    mtt(1,mp) = conj(mtt(1,m));
    mtt(2:Nx,mp) = flipud(conj(mtt(2:Nx,m)));
end

% now take inverse fourier transform
% Note: normalization not necessarily correct for non-square images
mest = ifft2(mtt)*(N/2);

subplot(1,3,3);
set(gca,'LineWidth',2);
hold on;
axis( [-1, 1, -1, 1] );
axis ij;
imagesc([-1, 1], [-1, 1], mest);
title('reconstructed image');
xlabel('y');
ylabel('x');

fprintf('mest has minimum value %f \n', min(min(mest)) );
fprintf('mest has maximum value %f \n', max(max(mest)) );
fprintf('\n')
